#include <Servo.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

#define Servo_minus 8
#define Servo_plus 9
#define Servo_pin 13
#define Fan_tr 4
#define Fan_POT A3

int s_angle = 0; // angle of the servo
unsigned long previousMillisServo = 0;
unsigned long previousMillisFan = 0;
const unsigned long intervalServo = 10; // interval for servo control (in milliseconds)
const unsigned long intervalFan = 100;  // interval for fan control (in milliseconds)

Servo mainservo;

void setup() {
  pinMode(Fan_POT, INPUT);
  pinMode(Servo_plus, INPUT_PULLUP);
  pinMode(Servo_minus, INPUT_PULLUP);
  pinMode(Fan_tr, OUTPUT);
  mainservo.attach(Servo_pin);
  mainservo.write(180);
  delay(1000);
  mainservo.write(0); // home the servo
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.clear();
  Serial.begin(9600);
}

void loop() {
  unsigned long currentMillis = millis();

  // Servo control
  if (currentMillis - previousMillisServo >= intervalServo) {
    previousMillisServo = currentMillis;
    int s_value = analogRead(Fan_POT);
    
    if (s_angle < 0) // limit the servo to 0 degrees
    {
      s_angle = 0;
    }
    if (s_angle > 60) // limit the servo to 60 degrees
    {
      s_angle = 60;
    }
    if (digitalRead(Servo_plus) == HIGH) {
      s_angle = s_angle + 2; // change angle by 1
      mainservo.write(s_angle);
    }
    if (digitalRead(Servo_minus) == HIGH) {
      s_angle = s_angle - 2; // change the angle by 1
      mainservo.write(s_angle);
    }

    lcd.setCursor(0, 0);
    lcd.print("Angle: ");
    lcd.print(s_angle);
    lcd.clear();
  }

  // Fan control
  if (currentMillis - previousMillisFan >= intervalFan) {
    previousMillisFan = currentMillis;
    int s_value = analogRead(Fan_POT);
    dutyCycle(Fan_tr, map(s_value, 0, 1023, 0, 100));
  }
}

void dutyCycle(char PIN, int value) {
  static boolean state = HIGH;
  static unsigned long previousMillis = 0;
  
  unsigned long currentMillis = millis();
  
  if (currentMillis - previousMillis >= value) {
    previousMillis = currentMillis;
    state = !state;
    digitalWrite(PIN, state);
    Serial.print(value + 10);
  }
}
